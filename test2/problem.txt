ruby問題

## 問題
ある野球チームAとBが試合をする様子をシミュレーションするプログラムを作成してください。

## 完成実行結果
上の例のように5回まで実装してください。
同じプレイヤー情報を使用しているので、正しく実装すれば同じになるはずです。

## 要求仕様
### プレイヤーの能力
プレイヤーはそれぞれattack, defenseを持っています。その値によってヒットかアウトかが決まります。(次項で説明)以下のハッシュでプレイヤーの能力を与えるので利用してください。キーが打順を表しています。

```ruby:player.rb
PlayerInfoA = {1 => { attack: 32, defense: 3},
               2 => { attack: 11, defense: 4},
               3 => { attack: 21, defense: 1},
               4 => { attack: 48, defense: 5},
               5 => { attack: 21, defense: 12},
               6 => { attack: 15, defense: 2},
               7 => { attack: 51, defense: 5},
               8 => { attack: 13, defense: 6},
               9 => { attack: 11, defense: 66}}

PlayerInfoB = {1 => { attack: 30, defense: 1},
               2 => { attack: 101, defense: 2},
               3 => { attack: 40, defense: 3},
               4 => { attack: 120, defense: 4},
               5 => { attack: 100, defense: 5},
               6 => { attack: 55, defense: 6},
               7 => { attack: 71, defense: 7},
               8 => { attack: 51, defense: 8},
               9 => { attack: 31, defense: 9}}

```


### ヒットについて
各バッターはヒットメータを持っており、ヒットメーターが最大値を超えた時バッターはヒットを打ちます。

ヒットメーターの最大値 = 相手チームのdefenseの総和

(ヒットメーターの初期値:0)

バッターに打順が回ってきた時、ヒットメータにバッターのattackが累積されていきます。ヒットメータの値が最大値を以上になった時、超過分の値を4で割った余りで塁打が決まります。ヒットについては以下のように対応しています。また、バッターのヒットメーターの超過分を次のヒットメータの値とします。

| 剰余 | 塁打 |
|:-----------|------------:|
| 0       | 一塁打        |
| 1     | 二塁打     |
| 2       | 三塁打 |
| 3         | ホームラン |



(例1)
ヒットメーターの最大値...100
現在のヒットメーター...80
バッターのattack...41
　　　　↓
ヒットメーターの超過分...21
剰余...1
塁打...二塁打
次のヒットメーター...21

(例2)
ヒットメーターの最大値...100
現在のヒットメーター...80
バッターのattack...20
　　　　↓
ヒットメーターの超過分...0
剰余...0
塁打...一塁打
次のヒットメーター...20



### ランナーの動作
盗塁は禁止です。
ランナー間の距離は常に一定となるようにランナーは動きます。
(野球盤みたいな感じ)
ランナーがホームベースまで帰ってきたら1点となります。

### ゲームの進行
ゲームは5回まで行われます。
各回が終わり次第得点を表示してください。
各表示は1秒空けてから表示するようにしてください。

### 注意
オブジェクト思考を意識して書いてください。（例えば、同じようなコードは一つのメソッドにまとめるなど）
拡張しやすいように適切にモジュールに分割してください。
（拡張例：チームを複数用意する。プレイヤーの順番を変えるなど。）
可読性を意識して書くようにしてください。
また、コードはgithub上にpublicなレポジトリを作成して管理するようにしてください。
終了次第githubのurlを文報チャンネルに送信してください.
※上の問題文に書いてある例ですが、解くときに@yuya-okinoまたは@kitagawaに連絡してもらえれば渡します。
